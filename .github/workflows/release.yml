name: '[ðŸš€] Release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  BASE_URL: http://127.0.0.1:3001
  USER_DB_PATH: ./booklib.json

jobs:
  build-and-package:
    name: build and package app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build app for Electron
        run: yarn build:electron

      - name: Verify build output
        run: |
          echo "Checking build outputs..."
          ls -la .output/ || echo ".output directory not found"
          ls -la dist-electron/ || echo "dist-electron directory not found"
          ls -la .output/public/ || echo ".output/public directory not found"

      - name: Package Electron app for Linux
        run: yarn electron:build:linux --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify packaged app structure
        run: |
          echo "Checking packaged app structure..."
          ls -la dist-packaged/ || echo "dist-packaged directory not found"
          find dist-packaged/ -name "*.AppImage" -exec echo "Found AppImage: {}" \;
          find dist-packaged/ -name "*.deb" -exec echo "Found DEB: {}" \;

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist-packaged/*.AppImage
            dist-packaged/*.deb
          retention-days: 5

  release:
    name: release
    needs: build-and-package
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for git operations

      - name: Get version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Ensure version starts with 'v'
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          # Also create a version without 'v' for package.json
          VERSION_NO_V="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # - name: Update package.json version
      #   run: |
      #     # Update the version in package.json
      #     npm version ${{ steps.version.outputs.version_no_v }} --no-git-tag-version
      #     echo "Updated package.json version to ${{ steps.version.outputs.version_no_v }}"

      - name: Commit version update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin main

      - name: Create and push tag
        run: |
          # Check if tag already exists
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.version }} already exists"
          else
            git tag "${{ steps.version.outputs.version }}"
            git push origin "${{ steps.version.outputs.version }}"
            echo "Created and pushed tag ${{ steps.version.outputs.version }}"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Create a simple changelog from recent commits
          CHANGELOG="## What's Changed\n\n"

          # Get commits since last tag (or last 10 commits if no previous tag)
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            COMMITS=$(git log --oneline --pretty=format:"* %s" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"* %s" -10)
          fi

          if [ -n "$COMMITS" ]; then
            CHANGELOG="$CHANGELOG$COMMITS\n\n"
          else
            CHANGELOG="${CHANGELOG}* Initial release\n\n"
          fi

          CHANGELOG="${CHANGELOG}**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.version }}"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Release Linux
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: BookLib ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: false
          files: |
            ./artifacts/linux-builds/*.AppImage
            ./artifacts/linux-builds/*.deb
          token: ${{ secrets.GITHUB_TOKEN }}
