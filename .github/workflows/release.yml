name: '[🚀] Release'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  BASE_URL: http://127.0.0.1:3001
  USER_DB_PATH: ./booklib.json

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "dir=$(pnpm cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        id: pnpm-cache
        with:
          path: |
            ${{ steps.pnpm-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app for Electron
        run: pnpm build:electron

      - name: Verify build output
        run: |
          echo "Checking build outputs..."
          ls -la .output/ || echo ".output directory not found"
          ls -la dist-electron/ || echo "dist-electron directory not found"
          ls -la .output/public/ || echo ".output/public directory not found"

      - name: Package Electron app for Linux
        run: pnpm electron:build:linux --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify packaged app structure
        run: |
          echo "Checking packaged app structure..."
          ls -la dist-packaged/ || echo "dist-packaged directory not found"
          find dist-packaged/ -name "*.AppImage" -exec echo "Found AppImage: {}" \;
          find dist-packaged/ -name "*.deb" -exec echo "Found DEB: {}" \;
          find dist-packaged/ -name "*.zip" -exec echo "Found ZIP: {}" \;

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist-packaged/*.AppImage
            dist-packaged/*.deb
            dist-packaged/*.zip
          retention-days: 5

  build-windows:
    name: Build Windows (Docker + Wine)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "dir=$(pnpm cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        id: pnpm-cache
        with:
          path: |
            ${{ steps.pnpm-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app for Electron
        run: pnpm build:electron

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Pull Docker image
        run: docker pull electronuserland/builder:wine

      - name: Build Windows executable with Docker
        run: |
          docker run --rm \
            --env ELECTRON_CACHE="/root/.cache/electron" \
            --env ELECTRON_BUILDER_CACHE="/root/.cache/electron-builder" \
            --env GH_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            --env pnpm_CACHE_FOLDER="/root/.cache/pnpm" \
            --env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES="true" \
            --env ELECTRON_SKIP_BINARY_DOWNLOAD="true" \
            -v ${{ github.workspace }}:/project \
            -v ${{ github.workspace }}-node-modules:/project/node_modules \
            -v ~/.cache/pnpm:/root/.cache/pnpm \
            electronuserland/builder:wine \
            /bin/bash -c "cd /project && \
              echo 'Upgrading pnpm to latest version...' && \
              npm install -g pnpm@latest && \
              echo 'Installing dependencies...' && \
              pnpm install --frozen-lockfile --network-timeout 300000 && \
              echo 'Building Electron app...' && \
              pnpm build:electron && \
              echo 'Building Windows executable...' && \
              pnpm electron:build:win --publish=never --config.nativeRebuilder=legacy"

      - name: Verify Windows build artifacts
        run: |
          echo "Checking Windows build artifacts..."
          ls -la dist-packaged/ || echo "dist-packaged directory not found"
          find dist-packaged/ -name "*.exe" -exec echo "Found EXE: {}" \;
          find dist-packaged/ -name "*.msi" -exec echo "Found MSI: {}" \;

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist-packaged/*.exe
            dist-packaged/*.msi
            dist-packaged/*Setup*.exe
          retention-days: 5

  release:
    name: Create release
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for git operations

      - name: Get version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Ensure version starts with 'v'
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          # Also create a version without 'v' for package.json
          VERSION_NO_V="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "dir=$(pnpm cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        id: pnpm-cache
        with:
          path: |
            ${{ steps.pnpm-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update package.json version
        run: |
          # Check current version in package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ steps.version.outputs.version_no_v }}"

          echo "Current version: $CURRENT_VERSION"
          echo "Target version: $TARGET_VERSION"

          if [ "$CURRENT_VERSION" = "$TARGET_VERSION" ]; then
            echo "Version is already $TARGET_VERSION, no update needed"
          else
            # Update the version in package.json
            npm version $TARGET_VERSION --no-git-tag-version
            echo "Updated package.json version to $TARGET_VERSION"
          fi

      - name: Commit version update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin main

      - name: Create and push tag
        run: |
          # Check if tag already exists
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.version }} already exists"
          else
            git tag "${{ steps.version.outputs.version }}"
            git push origin "${{ steps.version.outputs.version }}"
            echo "Created and pushed tag ${{ steps.version.outputs.version }}"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Create a simple changelog from recent commits
          CHANGELOG="## What's Changed\n\n"

          # Get commits since last tag (or last 10 commits if no previous tag)
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            COMMITS=$(git log --oneline --pretty=format:"* %s" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"* %s" -10)
          fi

          if [ -n "$COMMITS" ]; then
            CHANGELOG="$CHANGELOG$COMMITS\n\n"
          else
            CHANGELOG="${CHANGELOG}* Initial release\n\n"
          fi

          CHANGELOG="${CHANGELOG}**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.version }}"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: BookLib ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/linux-builds/*.AppImage
            ./artifacts/linux-builds/*.deb
            ./artifacts/linux-builds/*.zip
            ./artifacts/windows-builds/*.exe
            ./artifacts/windows-builds/*.msi
          token: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, release]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check Linux build
          if [ -d "./artifacts/linux-builds" ]; then
            echo "### ✅ Linux Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
            ls -la ./artifacts/linux-builds/ | tail -n +2 | while read line; do
              filename=$(echo "$line" | awk '{print $NF}')
              size=$(echo "$line" | awk '{print $5}')
              echo "- \`$filename\` ($size bytes)" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Linux Build Failed or Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Check Windows build
          if [ -d "./artifacts/windows-builds" ]; then
            echo "### ✅ Windows Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
            ls -la ./artifacts/windows-builds/ | tail -n +2 | while read line; do
              filename=$(echo "$line" | awk '{print $NF}')
              size=$(echo "$line" | awk '{print $5}')
              echo "- \`$filename\` ($size bytes)" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Windows Build Failed or Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Release status
          echo "### 📦 Release Status" >> $GITHUB_STEP_SUMMARY
          echo "The release has been created as a **draft**. Please review and publish manually." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }})" >> $GITHUB_STEP_SUMMARY
